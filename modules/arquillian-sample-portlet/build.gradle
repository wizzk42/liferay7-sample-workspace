buildscript {
    dependencies {
        //classpath group: "com.liferay", name: "com.liferay.gradle.plugins", version: "3.1.9"
        classpath 'de.undercouch:gradle-download-task:3.1.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven {
        url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
    }
}

apply plugin: 'java'
//apply plugin: 'osgi'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'de.undercouch.download'
apply plugin: "jacoco"

/**
 *
 */
import de.undercouch.gradle.tasks.download.Download
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import javax.management.remote.JMXConnectorFactory as JmxFactory
import javax.management.remote.JMXServiceURL as JmxUrl


/**
 *
 */
task deployTestDistributionLibraries(type: Copy)
configurations {
    testDistributionLibrary.extendsFrom(testIntegrationCompile)
    testDistributionProvided.extendsFrom(testIntegrationCompile)
}

/**
 * Dependency Requirements
 */
dependencies {

    compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "2.61.2"
    compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.10.5"

    compileOnly group: "javax.portlet", name: "portlet-api", version: "3.0.0"
    compileOnly group: "javax.servlet", name: "javax.servlet-api", version: "4.0.0"
    compileOnly group: "javax.websocket", name: "javax.websocket-api", version: "1.1"
    compileOnly group: "jstl", name: "jstl", version: "1.2"

    compileOnly group: "org.osgi", name: "osgi.cmpn", version: "6.0.0"
    compileOnly group: "org.osgi", name: "osgi.core", version: "6.0.0"
    //compileOnly group: 'org.osgi', name: 'org.osgi.enterprise', version: '5.0.0'

    //compileOnly group: 'org.jboss.osgi.resolver', name: 'jbosgi-resolver-felix', version: '3.0.1.Final'

    testIntegrationCompile group: 'org.jboss.shrinkwrap.osgi', name: 'shrinkwrap-osgi', version: '1.0.0-alpha-1'
    testIntegrationCompile group: "log4j", name: "log4j", version: "1.2.17"
    testIntegrationCompile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.25"
    testIntegrationCompile group: "junit", name: "junit", version: "4.12"

    testIntegrationCompile group: "org.jboss.arquillian.junit", name: "arquillian-junit-container", version: "1.2.1.Final"
    testIntegrationCompile group: "org.jboss.arquillian.graphene", name: "graphene-webdriver", version: "2.3.2"
    //testIntegrationCompile group: 'org.jboss.arquillian.container', name: 'arquillian-container-test-impl-base', version: '1.3.0.Final'
    testDistributionLibrary group: 'org.jboss.arquillian.container', name: 'arquillian-container-test-spi', version: '1.3.0.Final'

    testIntegrationCompile group: "com.liferay.arquillian", name: "com.liferay.arquillian.arquillian-container-liferay", transitive: false, version: "1.0.8"

    testDistributionProvided group: 'biz.aQute.bnd', name: 'bnd', version: '2.4.0'
    testDistributionProvided group: 'biz.aQute.bnd', name: 'bndlib', version: '2.4.0'

    testDistributionProvided group: 'com.liferay', name: 'com.liferay.hot.deploy.jmx.listener', version: '1.0.0'
    testDistributionLibrary group: 'org.jboss.arquillian.container', name: 'arquillian-container-karaf-remote', version: '2.2.1.Final'
    //testDistributionProvided group: 'org.jboss.arquillian.osgi', name: 'arquillian-osgi-bundle', version: '2.2.1.Final'

    testDistributionLibrary group: "com.liferay.portal", name: "com.liferay.portal.test", version: "4.0.1"
    testDistributionLibrary group: "com.liferay.portal", name: "com.liferay.portal.test.integration", version: "4.1.0"

    testDistributionLibrary group: "org.apache.aries", name: "org.apache.aries.util", transitive: false, version: "1.1.3"
    testDistributionLibrary group: "org.apache.aries.jmx", name: "org.apache.aries.jmx.api", transitive: false, version: "1.1.5"
    testDistributionLibrary group: "org.apache.aries.jmx", name: "org.apache.aries.jmx.core", transitive: false, version: "1.1.3"

}

jar {
    if (project.hasProperty('dir')) {
        destinationDir = file(dir)
    }
}

deploy {
    deleteAllActions()
    dependsOn = []
    finalizedBy deployTestDistributionLibraries
}


deployTestDistributionLibraries {
    ext {
        autoClean = false
    }
    from configurations.testDistributionLibrary

    include "*aries*.jar"
    include "*portal.test*.jar"
    include "*junit*.jar"

    into {
        "${liferay.liferayHome}/osgi/test"
    }

    outputs.upToDateWhen {
        false
    }

    //rename new RenameDependencyClosure(project, configurations.testDistributionLibrary.name)
}

jacoco {
    toolVersion = "0.7.9"
}

def bundle = 'liferay/bundle.zip'

liferay {
    liferayHome = 'liferay/liferay-ce-portal-7.0-ga4'
}

task copyJacocoAgent(type: Copy) {
    println configurations.jacocoAgent

    configurations.jacocoAgent.asFileTree.each {
        from(zipTree(it))
    }

    into "${rootDir}/build/jacoco"
}

task downloadLiferay(type: Download) {
    src 'http://downloads.sourceforge.net/project/lportal/Liferay%20Portal/7.0.3%20GA4/liferay-ce-portal-tomcat-7.0-ga4-20170613175008905.zip'
    dest file(bundle)
    overwrite false
    enabled !(file(liferay.liferayHome).exists())
}

task unzipLiferay(type: Copy) {
    from(zipTree(bundle))
    into 'liferay'
    enabled !(file(liferay.liferayHome).exists())
}

task copyPortalExt(type: Copy) {
    from file('src/testIntegration/resources/portal-ext.properties')
    into "${liferay.liferayHome}"
    enabled true
    //enabled !(file(liferay.liferayHome).exists())
}

unzipLiferay.dependsOn downloadLiferay
copyPortalExt.dependsOn unzipLiferay
setUpTestableTomcat.dependsOn copyPortalExt

jar {
    if (project.hasProperty('dir')) {
        destinationDir = file(dir)
    }
}

setUpTestableTomcat {
    dependsOn copyJacocoAgent

//    catalinaOptsReplacement(
//            "-XX:MaxPermSize=384m\"",
//            "-XX:MaxPermSize=384m\""
//                + "\n\nJACOCO_OPTS=\"-javaagent:${rootDir}/build/jacocoagent.jar="
//                + "destfile=${rootDir}/build/jacoco/testIntegration.exec,output="
//                + "file,append=true,jmx=true\"\n\nCATALINA_OPTS=\"\${CATALINA_OPTS}"
//                + "\${JACOCO_OPTS}\"\n"
//    )
}

startTestableTomcat {
    checkTimeout = 10 * 60 * 1000
}

task dumpJacoco {
    doLast {
        def serverUrl = 'service:jmx:rmi:///jndi/rmi://localhost:8099/jmxrmi'
        String beanName = "org.jacoco:type=Runtime"
        def server = JmxFactory.connect(new JmxUrl(serverUrl)).MBeanServerConnection
        def groovyJmxManagementBean = new GroovyMBean(server, beanName)

        println "Connected to:\n$groovyJmxManagementBean\n"
        println "Executing dump()"
        groovyJmxManagementBean.dump(true)
    }
}

jacocoTestReport {
    dependsOn dumpJacoco
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
    executionData = files("${rootDir}/build/jacoco/testIntegration.exec")
}

testIntegration {
    dependsOn deployTestDistributionLibraries

    finalizedBy jacocoTestReport
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}